services:
  postgres:
    container_name: postgres
    image: postgres:latest
    restart: "unless-stopped"
    environment:
      POSTGRES_USER: postgres_user
      POSTGRES_PASSWORD: postgres1234
      POSTGRES_DB: postgres
    healthcheck:
      test: ["CMD-SHELL", "pg_isready", "-d", "postgres"]
      interval: 20s
      timeout: 60s
      retries: 5
      start_period: 10s
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data

  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4:latest
    restart: "unless-stopped"
    environment:
      PGADMIN_DEFAULT_EMAIL: nikos@thom.com
      PGADMIN_DEFAULT_PASSWORD: niktom
      PGADMIN_LISTEN_PORT: 5050
    ports:
      - "5050:5050"
    depends_on:
      postgres:
        condition: service_healthy

  redis:
    container_name: redis
    image: redis:latest
    restart: "unless-stopped"
    ports:
      - "6379:6379"

  adminer:
    container_name: adminer
    image: adminer
    restart: "unless-stopped"
    ports:
      - "8080:8080"
    environment:
      ADMINER_DEFAULT_SERVER: "sqlserver"

  sqlserver:
    image: mcr.microsoft.com/mssql/server:2022-latest
    container_name: sqlserver
    restart: "unless-stopped"
    environment:
      SA_PASSWORD: "SwN123456789"
      ACCEPT_EULA: "Y"
    ports:
      - "1433:1433"

  # Default creds: guest / guest
  rabbitmq:
    container_name: rabbitmq
    image: rabbitmq:3-management-alpine
    restart: "unless-stopped"
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
    healthcheck:
      test: ["CMD-SHELL", "rabbitmqctl status"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  catalog-api:
    container_name: catalog-api
    image: nikosdmthom/catalog-api:latest
    restart: "unless-stopped"
    build:
      context: .
      dockerfile: Services/Catalog/Catalog.Api/Dockerfile
    environment:
      - ASPNETCORE_HTTP_PORTS=9090
    ports:
      - "9090:9090"
      - "9091:9091"
    depends_on:
      postgres:
        condition: service_healthy
      discount-grpc:
        condition: service_started

  basket-api:
    container_name: basket-api
    image: nikosdmthom/basket-api:latest
    restart: "unless-stopped"
    build:
      context: .
      dockerfile: Services/Basket/Basket.Api/Dockerfile
    environment:
      - ASPNETCORE_HTTP_PORTS=7070
    ports:
      - "7070:7070"
      - "7071:7071"
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_started

  discount-grpc:
    container_name: discount-grpc
    image: nikosdmthom/discount-grpc:latest
    restart: "unless-stopped"
    build:
      context: .
      dockerfile: Services/Discount/Discount.Grpc/Dockerfile
    environment:
      - ASPNETCORE_HTTP_PORTS=6060
    ports:
      - "6060:6060"
      - "6061:6061"

  ordering-api:
    container_name: ordering-api
    image: nikosdmthom/ordering-api:latest
    restart: "unless-stopped"
    build:
      context: .
      dockerfile: Services/Ordering/Ordering.Api/Dockerfile
    environment:
      - ASPNETCORE_HTTP_PORTS=3030
    ports:
      - "3030:3030"
      - "3031:3031"
    depends_on:
      sqlserver:
        condition: service_started
      rabbitmq:
        condition: service_healthy

  api-gateway:
    container_name: api-gateway
    image: nikosdmthom/api-gateway:latest
    restart: "unless-stopped"
    build:
      context: .
      dockerfile: ApiGateways/YarpApiGateway/Dockerfile
    environment:
      - ASPNETCORE_HTTP_PORTS=9900
    ports:
      - "9900:9900"
      - "9901:9901"
    depends_on:
      ordering-api:
        condition: service_started
      basket-api:
        condition: service_started
      catalog-api:
        condition: service_started

volumes:
  postgres_data:
